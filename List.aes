contract List =
  function size(l : list('a)) : int =
    size'(l, 0)

  private function size'(l : list('a), x : int) : int =
    switch(l)
      [] => x
      _ :: l' => size'(l', x + 1)

  function map(f : 'a => 'b, l : list('a)) : list('b) =
    switch(l)
     [] => []
     e :: l' => f(e) :: map(f, l')

  function foldr(f : (('a, 'b) => 'b), z: 'b, l : list('a)) : 'b =
    switch(l)
      [] => z
      e :: l' => f(e, foldr(f, z, l'))
      
  function foldl(f : (('b, 'a) => 'b), s: 'b, l : list('a)) : 'b =
    switch(l)
      [] => s
      e :: l' => foldl(f, f(s, e), l')


  function filter(f : ('a) => bool, l : list('a), acc : list('a)) =
    switch(l)
      [] => acc
      e :: l' =>
        if(f(e))
          filter(f, l', e :: acc)
        else
          filter(f, l', acc)

  function sum(l : list('a), f : 'a => int) : int =
    foldr((x, y) => x + y, 0, map(f, l))
